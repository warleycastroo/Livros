# -*- coding: utf-8 -*-
"""Cópia de atividade_interface.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LGK8AJE0yDogrStsRxlcVLTNvHkwH5vE
"""

pip install pycaret

pip install gradio

#importação dos dados
#link https://www.kaggle.com/datasets/harrimansaragih/dummy-data-for-classification
import pandas as pd
url='https://drive.google.com/file/d/13q-nkfm53UPQEj00OmN4VAW9Ro1qvt1E/view?usp=share_link'
url='https://drive.google.com/uc?id=' + url.split('/')[-2]
df = pd.read_csv(url,sep=',')

"""##Esses dados as seguintes informações :

##autor,Avaliação do usuário, Comentários, Preço, Ano, Gênero


"""

pip install numba --upgrade

new_df = df.dropna(axis=0)

new_df['Genre'] = new_df['Genre'].replace({"não FICÇÃO": 1, "FICÇÃO":0})

"""##Identificar os tipos de Dados do Dataset"""

# Iniciar a configuração
# Depois aperte ENTER para continuar.
from pycaret.classification import *
s = setup(new_df, target = 'Year', session_id = 123)

"""##treinado com 14 modelos diferentes, A tabela mostra as métricas do Maior para o Menor"""

best = compare_models(n_select = 15)
compare_model_results = pull()

"""##Para criar a Interface foi usado a biblioteca Gradio

https://towardsdatascience.com/supercharge-your-machine-learning-experiments-with-pycaret-and-gradio-5932c61f80d9
"""

#Predição
def predict(model, age, spending, region):
  
    df = pd.DataFrame.from_dict({'Year': [Year], 'Reviews': [Reviews], 'Genre': [Genre]})
    
    model_index = list(compare_model_results['Model']).index(model)
    model = best[model_index]
    pred = predict_model(model, df, raw_score=True)
    return {'Já leu algum desses livros': pred['Score_Yes'][0].astype('float64'), 'Não leu nenhum': pred['Score_No'][0].astype('float64')}

import gradio as gr

model = gr.inputs.Dropdown(list(compare_model_results['Model']), label="Modelo")
Year = gr.inputs.Slider(minimum=1, maximum=50, default=new_df['Year'].mean(), label = 'Ano')
Reviews = gr.inputs.Slider(minimum=1, maximum=10000, default=new_df['Reviews'].mean(), label = 'Comentários')
Price = gr.inputs.Slider(minimum=0, maximum=1, default=new_df['Price'].mean(), label = 'preço')

gr.Interface(predict, [model,Year,Reviews,Price], "label", live=True).launch(share= True)